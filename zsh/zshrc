set -u                   # Undefined variables are an error.
ZDOTDIR=~/.zsh           # Store all zsh-related stuff in ~/.zsh/ instead of ~/
HISTFILE=~/.zsh/history

### Setup PATH
##############
typeset -U path          # No duplicates
path=()

# On some other systems /usr/bin links to /bin; use the full path to prevent dupes.
_prepath() {
	for dir in "$@"; [[ -d "${dir:A}" ]] && path+=("${dir:A}" $path[@])
}
_postpath() {
	for dir in "$@"; [[ -d "${dir:A}" ]] && path+=("${dir:A}")
}

_prepath /bin /sbin /usr/bin /usr/sbin /usr/games
_prepath /usr/pkg/bin   /usr/pkg/sbin     # NetBSD
_prepath /usr/X11R6/bin /usr/X11R6/sbin   # OpenBSD
_prepath /usr/local/bin /usr/local/sbin

_prepath  ~/.local/gobin                  # Go
_postpath ~/code/Vim/gopher.vim/tools/bin
_prepath  ~/.local/bin ~/code/wm-scripts  # My local stuff.
_postpath ~/.gem/ruby/*/bin(N[-1])        # Ruby
_postpath ~/.luarocks/bin(N[-1])          # Lua
_postpath ~/.dotnet/root ~/.dotnet/tools  # .NET

unfunction _prepath
unfunction _postpath

### Various env variables
#########################
export LANG=en_NZ.UTF-8                      # Use Kiwiland for sane date format, metric system, etc.
export LC_COLLATE=C                          # I prefer this sorting.
[[ -n "${TMUX:-}" ]] && export TERM=tmux-256color || export TERM=st-256color

_exists() { (( $+commands[$1] )) }           # Helper; will be unset later.

_exists vim      && export EDITOR=vim        # Default applications.
_exists firefox  && export BROWSER=firefox
_exists less     && export PAGER=less
_exists clang    && export CC=clang
_exists clang++  && export CXX=clang++

# Store stuff in ~/.config and ~/.cache when we can.
# https://github.com/grawity/dotfiles/blob/master/.dotfiles.notes
export LESSHISTFILE=~/.cache/lesshistory
export LESSKEY=~/.config/less/less
export INPUTRC=~/.config/inputrc
export SQLITE_HISTORY=~/.cache/sqlite_history
export PSQLRC=~/.config/psqlrc
export PSQL_HISTORY=~/.cache/psql_history
export BUNDLE_USER_HOME=~/.cache/bundle
export GNUPGHOME=~/.config/gnupg
export CRAWL_DIR=~/.config/crawl
export XCOMPOSEFILE=~/.config/x11/compose
export XAUTHORITY=~/.config/x11/authority

# TODO
# Doesn't work? "startx ~/.config/x11/xinitrc"?
# export XINITRC=~/.config/x11/xinitrc
# export VIMINIT=":source ~/.config/vim/vimrc"

export BUNDLE_PATH=~/.gem             # Deal with bundler
export DOTNET_ROOT=~/.dotnet/root     # .NET root
export ANDROID_SDK_ROOT=~/android/sdk # Android tools
export GOBIN=~/.local/gobin           # Go binaries ('go install').
export GOPATH=/tmp/go                 # GOPATH mostly stores cache stuff these days.
export GOCACHE=$GOPATH/cache          # Build and test cache.
export GOTMPDIR=$GOPATH/tmp           # tmp files during compile
export GOFLAGS=-modcacherw            # Just leave mod cache writable.
mkdir -m0700 -p "$GOTMPDIR"           # Make sure it exists as Go won't create it.

# R    Display colours escape chars as-is (so they're displayed).
# i    Ignore case unless pattern has upper case chars.
# M    Display line numbers and position.
# Q    Never ring terminal bell.
# X    Don't clear the screen on exit.
# L    Ignore LESSOPEN â€“ some Linux distros set this to broken defaults (*cough* Fedora *cough*).
export LESS="RiMQXL"

export PGHOST=/tmp                 # PostgreSQL defaults
export PGDATABASE=goatcounter
export LS_COLORS="no=00:fi=00:di=34:ln=01;31:pi=34;43:so=31;43:bd=30;43:cd=30;43:or=01;35:ex=31:"
export GREP_COLOR=31                                           # Older GNU grep; BSD grep
export GREP_COLORS="ms=31:mc=31:sl=0:cx=0:fn=0:ln=0:bn=0:se=0" # Newer GNU grep.
export RIPGREP_CONFIG_PATH=$HOME/.config/ripgrep
export GH_NO_UPDATE_NOTIFIER=y     # Annoying update check.
export BLOCKSIZE=K                 # Output sizes in K instead of 512b blocks.
export MANWIDTH=80                 # Only needed with GNU stuff; use mandoc for better man.
export GTK_IM_MODULE=xim           # Make compose key work.
export QT_IM_MODULE=xim
export GTK_OVERLAY_SCROLLING=0     # Disable annoying "overlay scrollbar".
export SYSTEMD_PAGER=              # Don't output to a pager.

# https://wiki.archlinux.org/title/Java
export _JAVA_AWT_WM_NONREPARENTING=1  # This magic fixes Java applications.
#export _JAVA_OPTIONS "-Dswing.aatext=true -Dawt.useSystemAAFontSettings=on"
#export _JAVA_OPTIONS "-Dswing.aatext=true -Dawt.useSystemAAFontSettings=on -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel"

if [[ -d '/etc/service' ]]; then   # Set user service dir for runit.
	export SVDIR=/etc/service
elif [[ -d '/var/service' ]]; then
	export SVDIR=/var/service
fi
export XDG_RUNTIME_DIR=/tmp/xdg-runtime-$USER  # Needed for some programs.
mkdir -m0700 -p "$XDG_RUNTIME_DIR"

# Run commands from this file on interactive session
[[ -f "$HOME/.local/python-startup" ]] && export PYTHONSTARTUP=~/.local/python-startup


### Our work here is done if not an interactive shell
#####################################################
[[ -o interactive ]] || return 0

# Load zsh-completions
fpath=(~/.zsh/fpath ~/.zsh/zsh-completions/src $fpath)

# Directory shortcuts
hash -d c=~/code
hash -d pack=~c/Vim
hash -d cp=~c/Prog
hash -d cl=~c/Golib
hash -d gc=~/code/goatcounter
hash -d d=~/code/arp242.net/_drafts
hash -d p=~/code/arp242.net/_posts
hash -d vim=/usr/share/vim/vim82
hash -d go=/usr/lib/go/src

setopt no_flow_control       # Disable ^S, ^Q, ^\
stty -ixon quit undef        # For Vim etc; above is just for zsh.
setopt notify                # Report status of bg jobs immediately
setopt no_clobber            # Don't clobber existing files with > ....
setopt clobber_empty         # ... but do allow overwriting existing empty files.
setopt append_create         # Refuse to create new files with >>
setopt no_beep               # Don't beep
setopt no_hup                # Don't kill background jobs when exiting
setopt no_bg_nice            # Don't frob with nicelevels
setopt auto_continue         # Send CONT before disown if job is suspended.
setopt no_auto_remove_slash  # Don't guess when slashes should be removed (too magic)
setopt no_match              # Show error if globbing fails
setopt extended_glob         # More globbing characters
disable -p '^'               # Disable ^ pattern from extended_glob; it's the same as ~ anyway
LISTMAX=999999               # Disable 'do you wish to see all %d possibilities'

### History
setopt append_history        # Append to history, rather than overwriting
setopt inc_append_history    # Append immediately rather than only at exit
setopt extended_history      # Store some metadata as well
setopt hist_no_store         # Don't store history or fc commands
setopt no_bang_hist          # Don't use ! for history expansion
setopt hist_ignore_dups      # Don't add to history if it's the same as previous event.
setopt hist_ignore_all_dups  # Remove older event if new event is duplicate.
setopt hist_save_no_dups     # Older commands that duplicate newer ones are omitted.
HISTSIZE=11000               # Max. entries to keep in memory
SAVEHIST=10000               # Max. entries to save to file
HISTORY_IGNORE='([bf]g *|[bf]g|disown|cd ..|cd -)' # Don't add these to the history file.

### Prompt
setopt prompt_subst          # Expand parameters commands, and arithmetic in PROMPT
setopt transient_rprompt     # Remove rprompt after a command is run.

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git       # Enable just git.
zstyle ':vcs_info:*' formats '(%b)'   # Show branch.

set_prompt() {
	vcs_info >/dev/null 2>&1
	print -n "%(?..%130(?..%S%?%s))"           # Exit code in "standout" if non-0 and non-130 (^C to clear input)
	print -n "[%~]${vcs_info_msg_0_:-}%# "     # Directory and VCS info (if any).
}
PROMPT=$'$(set_prompt)'

_has_bat=$([[ -f /sys/bus/acpi/drivers/battery/PNP0C0A:00/power_supply/BAT0/capacity ]]; printf $?)
set_rprompt() {
	local host=    # Show hostname only for ssh connections; otherwise just the local time.
	[[ -n "${SSH_CLIENT:-}${SSH2_CLIENT:-}${SSH_CONNECTION:-}" ]] && host="%F{red}%U%B%m%b%u%f:"
	local bat=     # Battery status
	(( $_has_bat )) || \
		bat=":$(< /sys/bus/acpi/drivers/battery/PNP0C0A:00/power_supply/BAT0/capacity)%%"
	print "${host}%T${bat}"
}
RPROMPT=$'$(set_rprompt)'


### Completion
##############
setopt complete_in_word             # Allow completion from within a word/phrase.
setopt always_to_end                # Move cursor to end of word when when completing from middle.
setopt no_list_ambiguous            # Show options on single tab press.
setopt list_packed                  # Use different column widths if w can; makes it more compact.

# Load and init
autoload -U compinit && compinit    # Load completion system.
zmodload zsh/complist               # Load interactive menu.

autoload -U select-word-style && select-word-style bash          # Only alphanumeric characters match a "word".
zstyle ':zle:*' word-chars '-_'                                  # Also match these additional characters as a "word".

zstyle ':completion:*'           menu select                     # Use menu for selecting.
zstyle ':completion::complete:*' use-cache on                    # Enable cache (not used by many completions).
zstyle ':completion:*:warnings'  format 'No completions'         # Warn when there are no completions
zstyle ':completion:*:default'   list-colors ${(s.:.)LS_COLORS}  # Show ls-like colours in file completion.
zstyle ':completion:*'           squeeze-slashes true            # "path//<Tab>" is "path/" rather than "path/*"
zstyle ':completion:*'           matcher-list 'm:{a-z}={A-Z}'    # Make completion case-insensitive.
zstyle ':completion:*:functions' ignored-patterns '_*'           # Ignore in completion.
zstyle ':completion:*:*files'    ignored-patterns '*?.pyc' '*?.o'

### Keys
########
bindkey -e              # Use the default "emacs" bindings.
export KEYTIMEOUT=10    # Time to wait for another key in multi-character sequences, in 1/100th second.

autoload -U up-line-or-beginning-search    && zle -N up-line-or-beginning-search
autoload -U down-line-or-beginning-search  && zle -N down-line-or-beginning-search
autoload -U edit-command-line              && zle -N edit-command-line

bindkey '^[[A'  up-line-or-beginning-search    # Arrow up
bindkey '^[OA'  up-line-or-beginning-search
bindkey '^p'    up-line-or-beginning-search
bindkey '^o'    up-line-or-beginning-search    # ^p is my tmux prefix, so map ^p to ^o
bindkey '^[[B'  down-line-or-beginning-search  # Arrow down
bindkey '^[OB'  down-line-or-beginning-search
bindkey '^n'    down-line-or-beginning-search
bindkey '^[[H'  beginning-of-line              # Home
bindkey '^[[1~' beginning-of-line
bindkey '^[[7~' beginning-of-line
bindkey '^[[F'  end-of-line                    # End
bindkey '^[[4~' end-of-line
bindkey '^[[8~' end-of-line
bindkey '^[[3~' delete-char                    # Delete
bindkey '^[[P'  delete-char
bindkey '^h'    backward-delete-char           # Backspace
bindkey '^?'    backward-delete-char
bindkey '^t'    edit-command-line              # Edit in Vim.
bindkey '^\'    accept-and-hold                # Run command without clearing commandline.
bindkey '^[[Z'  up-history                     # Shift+Tab; so it works in completion menu to go back.
bindkey '^[OP'  run-help                       # F1
bindkey -s '^[[5~' ''                          # Disable Page up/down; on my ThinkPad they're right next to the
bindkey -s '^[[6~' ''                          # arrow keys and pressing them by accident is annoying.

# Toggle "doas" at the start.
toggle-doas() {
	[[ "${BUFFER:0:4}" = "doas" ]] &&
		{CURSOR+=-5; BUFFER="${BUFFER:5}";} ||
		{BUFFER="doas $BUFFER"; CURSOR+=5;}
}
zle -N toggle-doas toggle-doas && bindkey '^s' toggle-doas

# Replace first word with "rm".
replace-rm() { zle beginning-of-line; zle delete-word; zle -U "rm " }
zle -N replace-rm replace-rm && bindkey '^r' replace-rm

# Store the current input, and restore it with a second ^q
remember() {
	if (( $#BUFFER )); then
		stored=$BUFFER
		BUFFER=
	else
		print -ln "${stored:-}"
	fi
}
zle -N remember remember && bindkey '^q' remember


### Commands
############
alias cp='cp -i'                        # Ask for confirmation when overwriting existing files.
alias mv='mv -i'
alias make='nice -n 20 make'            # Make can always be very nice.
alias free='free -m'                    # MB is more useful.
alias cal='cal -m'                      # Week starts on Monday.
alias ps='ps axu'                       # These are pretty much the only flags I use.
alias td='echo $(date +%Y-%m-%d)'       # "today"
alias now='echo $(date +%Y-%m-%d\ %T)'
alias hub='NO_COLOR=y gh'               # "git" and "go" already start with "g"; this is easier.

# Disable this ridiculous banner and colours.
alias ffmpeg='AV_LOG_FORCE_NOCOLOR=1  ffmpeg  -hide_banner'
alias ffprobe='AV_LOG_FORCE_NOCOLOR=1 ffprobe -hide_banner'
alias ffplay='AV_LOG_FORCE_NOCOLOR=1  ffplay  -hide_banner'

# Concat files with ffmpeg. The ffmpeg CLI is the most obscure and arcane I've
# seen, and I always keep forgetting how to do this.
ffconcat() {
	tmp=$(mktemp)
	{
		for f in ${@[1,-2]}; print "file '${f:A}'" >>$tmp
		ffmpeg -f concat -safe 0 -i "$tmp" -c copy "${@[-1]}"
	} always {
		rm $tmp
	}
}

if [[ "$(uname)" = "Linux" ]]; then
	if [ -h /bin/ls ]; then            # Assume busybox; the bb colours don't work on light bg.
		alias ls='ls -F --color=never'
	else
		alias ls='ls -FN --color=auto' # -F adds trailing / etc; -N avoids adding quotes
	fi
	alias lc='ls -lh'              # "List Complete"
	alias la='ls -A'               # "List All"
	alias lac='ls -lhA'            # "List All Complete"
	alias lh='ls -d .*'            # "List Hidden"
	alias lsd='ls -ld *(-/DN)'     # "List Directories"
else
	alias ls='ls -F'
	alias lc='ls -l'
	alias la='ls -a'
	alias lac='ls -la'
fi

if _exists systemctl; then
	alias zzz='systemctl suspend'
	alias ZZZ='systemctl hibernate'
elif _exists pm-suspend; then
	alias zzz='pm-suspend'
	alias ZZZ='pm-hibernate'
fi

_exists bsdtar && alias tar='bsdtar'
_exists htop   && alias top='htop'
alias youtube-dl='noglob yt-dlp --no-part -o "%(title)s-%(id)s.%(ext)s"'
alias youtube-dl-audio='yt-dlp --extract-audio'
alias sqlite=sqlite3
alias gpg=gpg2
alias psql='LESS=S$LESS psql'  # Don't wrap
alias ag='rg'                  # I'm so used to typing "ag".
alias vim="vim -p --ttyfail"   # Open in tabs, and refuse to open if output is not a terminal.
alias vi="vim"
alias batchy='vim +":Batchy echo" +:S +":setl nowrap"'
alias scc='scc --min-gen --no-complexity --no-cocomo --no-size'

unfunction _exists   # Unset helper.

alias sl='ls'        # Typos
alias l='ls'
alias c='cd'
alias vo='vi'
alias ci='vi'
alias iv='vi'
alias grpe='grep'
alias Grep='grep'
alias les='less'
alias les='less'
alias Less='less'
alias cd.='cd .'
alias cd..='cd ..'

autoload -U run-help run-help-git run-help-ip   # Smarter run-help
alias run-help >/dev/null && unalias run-help   # Unset the default

alias curl='noglob curl'              # Disable globbing for some commands where we rarely want it;
alias find='noglob find'
alias pharod='noglob pharod'

autoload -U zcalc                     # Get quick results for "zc 6 * 6", or just use "zc" to get zcalc
alias zc >/dev/null && unalias zc
zc() { if (( $# )); then zcalc -e "$@"; else zcalc; fi }
alias zc='noglob zc'

alias -g VV=' |& vim +S -'            # Global aliases to pipe output.
alias -g LL=' |& less'
alias -g GG=' |& grep'
alias -g HH=' |& head -n20'
alias -g XX=' |& xclip -in'           # TODO: ideally I'd like to copy to both, but xclip doesn't support that
alias -g LLl=' |& less'               # Typo after using ^l

# Diff two directories
diffdir() { vim ${@[3,-1]} +":Diffdir $1 $2" }

# So I can map ^Z in mpv
mpv() { stty susp ''; =mpv $@; stty susp '^Z'; }

# "ag edit" and "grep edit".
age() {
	local IFS=$'\n' files=($(=rg -l "$@"))
	(( $#files )) || return 1
	vim --ttyfail -p $files \
		+':silent! /\v'"${@[-1]/\//\\/}" \
		+':silent! tabdo :1 | normal! n' +':tabfirst'
}
grepe() {
	local IFS=$'\n' files=($(=grep -l "$@"))
	(( $#files )) || return 1
	vim --ttyfail -p $files \
		+':silent! /\v'"${@[-1]/\//\\/}" \
		+':silent! tabdo :1 | normal! n' +':tabfirst'
}

# Restart ssh-agent after restarting WM or x11 (may be old env var in tmux).
ssh-reagent() {
	export SSH_AUTH_SOCK=$(print /tmp/ssh-*/agent.*)
	ssh-add -l >/dev/null || ssh-add
}

# Get random string.
rnd() {
	[[ "${2:-}" = "alpha" ]] && filter='[:punct:][:space:][:cntrl]' || filter='[:space:]'
	strings -n1 < /dev/urandom | tr -d "$filter" | head -c${1:-15}
	echo
}

# Create directory alias for the current directory.
hashcwd() { (( $+argv[1] )) && hash -d "$1"="$PWD" || hash -d }

# Set up a "tmp go" for testing.
tgo() {
	local tmp="$(mktemp -p /tmp -d "tgo_$(date +%Y%m%d)_XXXXXXXX")"
	printf 'package main\n\nfunc main() {\n\n}\n' > "$tmp/main.go"
	printf 'package main\n\nimport "testing"\n\nfunc TestA(t *testing.T) {\n\n}\n\n' > "$tmp/main_test.go"
	printf 'func BenchmarkA(b *testing.B) {\n\tb.ReportAllocs()\n\tfor n := 0; n < b.N; n++ {\n\t}\n}\n' >> "$tmp/main_test.go"

	printf 'module %s\n' "$(basename "$tmp")" > "$tmp/go.mod"
	(
		cd "$tmp"
		vim -p main.go main_test.go
		print "$tmp"
	)
}

# Run sql files or commands.
sql() {
	local cmd="psql -X -P linestyle=unicode -P null=NULL goatcounter"
	local f="$HOME/docs/sql/scripts/$1"
	if [[ -f "$f" ]]; then
		eval "$cmd" <"$HOME/docs/sql/scripts/$1" | less -S
	else
		eval "$cmd" <<<"$1" | less -S
	fi
}
_sql() { _files -W ~/docs/sql/scripts }
compdef _sql sql

# sman, or "SQL man"; list completions just for the PostgreSQL manpages on SQL syntax.
sman() {
	if [[ ${@[(i)-w]} -le ${#@} ]]; then
		local page=("${(@)@:#-w}")
		${BROWSER:-firefox} "https://www.postgresql.org/docs/current/sql-${${(L)page%-??}//_/}.html"
		return
	fi
	man $@
}
_sman() {
	local x=()
	for f in /usr/share/man/man7/[A-Z]*.7; do
		f=${f%.7}
		f=${f%-13}
		x+=(${f##*/})
	done
	_arguments "1: :{_describe 'page' x}"
}
compdef _sman sman

# Find outdated modules.
go-mod-update() {
	go list -u -m $(go list -m -f '{{.Indirect}} {{.}}' all | awk '/^false/ {print $2}') | grep '\['
}

# Remove all files last accessed more than 1 day ago.
go-clean-cache() {
	#files=("$(go env GOPATH)/"**(ad+1))
	files=("$(go env GOPATH)/"**/*(N.ad+1))
	if (( ! $#files )); then
		print "No files to remove in $(go env GOPATH)"
		return 2
	fi

	print $files
	print -n 'Remove? [y/N]'
	read -n a

	if [[ $a = y ]]; then
		:
		#rm $files
	else
		print 'Well okay then'
	fi
}
