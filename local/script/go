#!/usr/bin/env zsh
#
# Frob a bit with the "go" command to work around some issues.
#
# - Use module name instead of "cmd" for "go install ./cmd"
# - "go help" will highlight flags as bold and pipes to $PAGER
# - Having -h, -help, or --help in any position will run "go help $cmd".
#
# The "real" go is assumed to be in /usr/bin/go.
[ "${ZSH_VERSION:-}" = "" ] && echo >&2 "Only works with zsh" && exit 1
setopt err_exit no_unset no_clobber pipefail

# Special case for projects that have the main package in ./cmd rather than
# ./cmd/dir; go install compiles that to $GOBIN/cmd, which isn't very useful.
# Frob so that it installs as $GOBIN/$module instead.
if [[ ${1:-} = 'install' && $argv[-1]:t = 'cmd' ]]; then
	argv=(build -o $(go env GOBIN)/${$(go list -m):t} $argv[2,-1])
	[[ -z ${VIM:-} ]] && print >&2 "rewrite: go $argv"  # Bit annoying when using :make
fi

# Always show help for command if -h, -help, or --help is in the command line at
# any position.
if (( $argv[(i)-h] <= $#argv || $argv[(i)-help] <= $#argv ||  $argv[(i)--help] <= $#argv )); then
	for p in $argv; do
		if [[ $p[1] != '-' ]]; then
			argv=(help $p)
			break
		fi
	done
fi

# Automatically pipe go test -bench output for nicer alignment and numbers.
# if (( $argv[(i)-bench] <= $#argv && $+commands[gobench.awk] )); then
# 	exec /usr/bin/go $argv | gobench.awk
# fi

# Show flags as bold in go help, and pipe to $PAGER.
if [[ ${1:-} = 'help' ]]; then
	/usr/bin/go $argv | sed -E 's/(^|\s)-[a-z0-9=]+/\x1b[1m\0\x1b[0m/g' |& $PAGER
	exit $?
fi

exec /usr/bin/go $argv
