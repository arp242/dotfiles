# /usr/share/doc/git-jump/README


### General settings
####################

[user]
name       = Martin Tournoij
email      = martin@arp242.net
signingKey = ~/.ssh/id_ed25519

[include]
path = ~/code/Misc/git-color-schemes/light-minimal

[init]
defaultBranch = master       # Just keep the master branch for now.

[gpg]
format = ssh                 # Sign with SSH key.

[core]
eol   = lf                   # Always use \n, even on Windows.
pager = less -F              # Quit pager if the contents can fit on the screen.

[http]                       # Send cookes (e.g. to signal Google SLA signage).
cookiefile = ~/.config/git/cookies

[url "git@github.com:"]      # Prefer git protocol over http for GitHub.
insteadOf = https://github.com/
[url "git@gitlab.com:"]
insteadOf = https://gitlab.com/

[pretty]
#myname=fmt
# Alias for a --pretty= format string, as specified in git-log(1).
# Any aliases defined here can be used just as the built-in pretty
# formats could. For example, running git config pretty.changelog
# "format:* %H %s" would cause the invocation git log
# --pretty=changelog to be equivalent to running git log
# "--pretty=format:* %H %s". Note that an alias with the same name as
# a built-in format will be silently ignored.


#### Command settings
#####################
[commit]
gpgsign = true               # Sign commits.

[diff]
algorithm    = histogram     # Better quality diffs (but slower).
noprefix     = true          # Don't show prefixes in file paths.
colorMoved   = plain         # Highlight chunks of text that moved unchanged different.
colorMovedWS = no            # Got bad results with ignoring whitespace.

[fetch]
prune     = true             # Automatically remove remote tracking that no longer exists.
pruneTags = true

[grep]
lineNumber = true            # Add line and column number.
column     = true

[help]
autoCorrect = 10             # Run guessed command after 1s if there's only one guess result.

[log]
abbrevCommit = true          # Short commits hashes.
follow       = true          # Include commits from before renames.

[merge]
#ff        = false            # Disable fast-forward merges.
stat      = false            # Don't print diffstat after merge.
verbosity = 1                # Only show conflicts.

[pull]
#rebase=false
ff = only                    # fast-forward instead of merge commits.

[push]
default = current            # Update a branch with the same name on the receiving end.
followTags = true            # Automatically push annotated tags.

[rebase]
missingCommitsCheck = error  # Don't drop removed lines in rebase -i; need explicit drop.

[status]
short              = true    # Always use short CVS-ish output.
branch             = true    # Show branch on status.
showUntrackedFiles = all     # Show untracked files in untracked dirs too.

[stash]
showPatch = true             # Show patch in git stash show.

### Aliases
###########

[alias]
st        = status           # Simple shortcuts.
co        = checkout
ci        = commit
diffh     = diff HEAD
undolast  = reset HEAD~      # Undo last commit.
sl        = show HEAD        # Show last commit.

# Use draft message for commit.
draft = !git commit --edit -F $(git rev-parse --git-dir)/draft

# Reuse last commit message.
# TODO: --cleanup to remove # lines?
lastci = !git commit --edit -F $(git rev-parse --git-dir)/COMMIT_EDITMSG

# Edit git-status files in git.
edit = !vim -p $(git diff --name-only)

# Show nice overview of tags and branches sorted by date.
t = tag --sort=creatordate --format \
	'%(creatordate:short) %(HEAD)%(align:width=20)%(refname:short)%(end) → %(upstream:track)%(subject)'
b = branch --sort=creatordate --format \
	'%(creatordate:short) %(HEAD)%(align:width=20)%(refname:short)%(end) → %(upstream:track)%(subject)'

# Like --oneline, but with date.
# TODO: add some colours
l = log --format=format:'%cs %h %s%d'

# Just merge files with regular Vim; I don't like using vimdiff.
mergeit = ![ -z "$(git diff --diff-filter=U)" ] \
	&& echo "No unmerged files" \
	|| vim \
		+'/^\\(<<<<<<<\\|=======\\|>>>>>>>\\)' \
		+':silent tabdo :1 | normal! n' \
		+':tabfirst' \
		-p $(git diff --name-only --diff-filter=U)

# Figure out who works on this.
authors = !git log --format='%an <%ae>' | sort | uniq -c | sort -rn
